syntax = "proto3";

package SchedularService;

import   "google/protobuf/timestamp.proto";
import   "google/api/annotations.proto";

service SchedularService{

    //Schedular CRUD
    rpc CreateSchedule(Schedule) returns (Schedule){
        option (google.api.http) = {
                post:"/createSchedule"
                body: "*"
        };
    }

    rpc GetSchedule(GetScheduleRequest) returns (stream Schedule){
        option (google.api.http) = {
                post:"/getSchedule"
                body: "*"
        };
    }

    rpc UpdateSchedule(Schedule) returns (Schedule){
        option (google.api.http) = {
                post:"/updateSchedule"
                body: "*"
        };
    }

    rpc DeleteSchedule(DeleteScheduleRequest) returns (DeleteScheduleResponse){
        option (google.api.http) = {
                post:"/deleteSchedule"
                body: "*"
        };
    }

    //Refresh manupilation
    rpc RefreshSchedule(RefreshScheduleRequest) returns (RefreshScheduleResponse){
        option (google.api.http) = {
                post:"/refreshSchedule"
                body: "*"
        };
    }
}

message Schedule{
    string brand = 1;
    string vendor = 2;
    int32 startTime = 3;
    int32 endTime = 4;
    repeated Page pages = 6;
    google.protobuf.Timestamp createdAt = 7;
    google.protobuf.Timestamp updatedAt = 8;
}

message Page{
    string pageName = 1;
    int32 pageIndex = 2;
    string pageLogo = 3;
    repeated Row row = 4;
    repeated Carousel carousel = 5;
    google.protobuf.Timestamp createdAt = 7;
    google.protobuf.Timestamp updatedAt = 8;
}

message Carousel{
    string target = 1;
    string packageName = 2;
    string imageUrl = 3;
    string title = 4;
}





// -1 for sort descending and 1 for sort ascending,
message Row{
    RowLayout rowlayout = 1;
    string rowName = 2;
    int32 rowIndex = 3;
    map<string, RowFilterValue> rowFilters = 4;
    map<string, sint32> rowSort = 5;
    repeated string rowTileIds = 6;
    RowType rowType = 7;
}

enum RowType{
    Editorial = 0;
    Recommendation  = 1 ;
    Dynamic  = 2;
}

enum RowLayout{
    Landscape = 0;
    Portrait = 1;
    Square = 3;
    Circle = 4;
}

message RowFilterValue {
    repeated string values = 1;
}




message GetScheduleRequest{
    string vendor = 1;
    string brand = 2;
}

message DeleteScheduleRequest {
    string vendor = 1;
    string brand = 2;
    int32 startTime = 3;
    int32 endTime = 4;
}

message DeleteScheduleResponse{
    bool isSuccessful = 1;
}


//Refresh logic
message RefreshScheduleRequest{
}


message RefreshScheduleResponse{
    map<string, RowFilterValue> rowFilters = 1;
}


//Delivery Messages


















